// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using WebApplicationMarketing.Models_;

#nullable disable

namespace WebApplicationMarketing.Data_
{
    public partial class MyappdbContext : DbContext
    {
        public MyappdbContext()
        {
        }

        public MyappdbContext(DbContextOptions<MyappdbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Addlink> Addlinks { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }
        public virtual DbSet<IncomingTraffic> IncomingTraffics { get; set; }
        public virtual DbSet<InsideClub> InsideClubs { get; set; }
        public virtual DbSet<KeyIndicator> KeyIndicators { get; set; }
        public virtual DbSet<OnlinePay> OnlinePays { get; set; }
        public virtual DbSet<SettingTable> SettingTables { get; set; }
        public virtual DbSet<SocialMedium> SocialMedia { get; set; }
        public virtual DbSet<UnTable> UnTables { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseNpgsql("Host=localhost;Database=MyAppDB;Username=postgres;Password=1111;Persist Security Info=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Russian_Russia.1251");

            modelBuilder.Entity<Addlink>(entity =>
            {
                entity.HasKey(e => e.IdLink)
                    .HasName("addlinks_pkey");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.Addlinks)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("addlinks_Id_fkey");
            });

            modelBuilder.Entity<AspNetUserLogin>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });
            });

            modelBuilder.Entity<AspNetUserRole>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });
            });

            modelBuilder.Entity<AspNetUserToken>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });
            });

            modelBuilder.Entity<IncomingTraffic>(entity =>
            {
                entity.HasKey(e => e.IdIt)
                    .HasName("incoming_traffic_pkey");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.IncomingTraffics)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("incoming_traffic_Id_fkey");
            });

            modelBuilder.Entity<InsideClub>(entity =>
            {
                entity.HasKey(e => e.IdIc)
                    .HasName("inside_club_pkey");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.InsideClubs)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("inside_club_Id_fkey");
            });

            modelBuilder.Entity<KeyIndicator>(entity =>
            {
                entity.HasKey(e => e.IdKi)
                    .HasName("key_indicators_pkey");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.KeyIndicators)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("key_indicators_Id_fkey");
            });

            modelBuilder.Entity<OnlinePay>(entity =>
            {
                entity.HasKey(e => e.IdOp)
                    .HasName("online_pay_pkey");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.OnlinePays)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("online_pay_Id_fkey");
            });

            modelBuilder.Entity<SettingTable>(entity =>
            {
                entity.HasKey(e => e.IdSt)
                    .HasName("setting_table_pkey");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.SettingTables)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("setting_table_Id_fkey");
            });

            modelBuilder.Entity<SocialMedium>(entity =>
            {
                entity.HasKey(e => e.IdSm)
                    .HasName("social_media_pkey");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.SocialMedia)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("social_media_Id_fkey");
            });

            modelBuilder.Entity<UnTable>(entity =>
            {
                entity.HasKey(e => e.IdUt)
                    .HasName("un_table_pkey");

                entity.HasOne(d => d.IdNavigation)
                    .WithMany(p => p.UnTables)
                    .HasForeignKey(d => d.Id)
                    .HasConstraintName("un_table_Id_fkey");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}